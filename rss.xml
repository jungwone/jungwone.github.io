<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[중원이 블로그]]></title><description><![CDATA[공부한 것들과 개발과 관련된 일들을 기록하기 위한 블로그입니다.]]></description><link>https://jungwone.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 16 Aug 2021 15:04:25 GMT</lastBuildDate><item><title><![CDATA[자바스크립트 데이터 타입 (JavaScript Data Type)]]></title><description><![CDATA[자바스크립트 데이터 타입에 관해 공부했다.
내가 몰랐거나 중요하다고 생각되는 부분을 정리하면서 다시 한번 되새긴다. 실수 처리 자바스크립트는 2진수, 8진수, 16진수를 표현하기 위한 데이터 타입을 제공하지 않는다.
그래서 2진수, 8진수, 1…]]></description><link>https://jungwone.github.iojavascript-data-type</link><guid isPermaLink="false">https://jungwone.github.iojavascript-data-type</guid><pubDate>Mon, 16 Aug 2021 14:07:00 GMT</pubDate><content:encoded>&lt;p&gt;자바스크립트 데이터 타입에 관해 공부했다.&lt;br/&gt;
내가 몰랐거나 중요하다고 생각되는 부분을 정리하면서 다시 한번 되새긴다.&lt;/p&gt;
&lt;h2&gt;실수 처리&lt;/h2&gt;
&lt;p&gt;자바스크립트는 2진수, 8진수, 16진수를 표현하기 위한 데이터 타입을 제공하지 않는다.&lt;br/&gt;
그래서 2진수, 8진수, 16진수의 값을 변수에 할당해도 해석될 때는 모두 10진수로 해석된다.&lt;br/&gt;
예를 들면 아래와 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; binary &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0b01000001&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 2진수&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; octal &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0o101&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 8진수&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; hex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x41&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 16진수&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;binary&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 65&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;octal&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 65&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 65&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;모든 수를 실수로 처리한다는 자바스크립트의 재미있는(?) 특성 덕분에 아래와 같은 결과가 나타난다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;우리가 변수에 1이라는 값을 할당하고 그것의 출력 값이 1로 보인다고 해도, &lt;strong&gt;실제로 그 수는 정수가 아닌 실수인 것이다&lt;/strong&gt;. 옛날에 이것과 관련해서 잠깐 애를 먹었던 기억이 있는데 정확히 어떤 상황이었는지 떠오르지가 않는게 좀 아쉽다. 그런 경험들은 앞으로 잘 기록해 놓아야겠다.&lt;/p&gt;
&lt;p&gt;또 하나 알고리즘을 공부하면서 출력 값을 테스트 하면서 재미있는 것을 발견했다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// -0&lt;/span&gt;
conosle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 0&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;실행 환경에 따라 다르다고 하는 말을 듣긴 했는데 0에 -를 붙이면 그대로 -0이 출력된다.&lt;/p&gt;
&lt;p&gt;(-)부호가 붙지 않은 0과 비교하면 true가 찍히는데, 알고리즘의 출력과 관련해서 0이 답으로 나와야 할 때 -0이 나오면 오답으로 처리될 수 있으니 주의해야 한다.&lt;/p&gt;
&lt;h2&gt;undefined&lt;/h2&gt;
&lt;p&gt;자바스크립트에서 변수를 선언하고 값을 따로 할당하지 않으면 암묵적으로 값이 &lt;code class=&quot;language-text&quot;&gt;undefined&lt;/code&gt;로 초기화 된다.
물론 이 &lt;code class=&quot;language-text&quot;&gt;undefined&lt;/code&gt;도 아래와 같이 변수에 의도적으로 할당할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; foo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;foo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// undefined&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;중요한 것은 &lt;code class=&quot;language-text&quot;&gt;undefined&lt;/code&gt;의 목적이 개발자가 의도적으로 할당하기 위한 값이 아니라 자바스크립트 엔진이 변수를 초기화 할 때 사용하는 값이라는 사실이다. &lt;br/&gt;
따라서 개발자가 의도적으로 변수에 할당한다면 본래 취지와 어긋날 뿐더러 혼란을 줄 수 있으므로 권장하지 않는다.
&lt;br/&gt;
변수 선언 후에 초기화 하지 않으면 변수의 초기 값이 undefined로 할당된다는 것은 알고 있었지만, undefined에 대해서 큰 고민을 해본 적은 없었다. 그래서 코드를 작성할 떄 undefined라는 값을 변수에 의도적으로 할당한 적도 있었다. 특히 TypeScript를 사용할 때 그러한 경우가 많았다.&lt;/p&gt;
&lt;p&gt;실무에서 React와 TypeScript를 함께 사용하고 있는데 아래와 초기 값을 명시해 주지 않으면, 변수의 타입이 &lt;code class=&quot;language-text&quot;&gt;number | undefined&lt;/code&gt; 로 설정된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setInput&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;앞으로 값을 비워주어야 할 때는 undefined를 다시 변수에 할당하기 보다는, null을 할당해서 의미를 더 명확히 하도록 코드를 작성해야겠다.&lt;/p&gt;
&lt;h2&gt;자바스크립트는 동적 타입 언어&lt;/h2&gt;
&lt;p&gt;자바스크립트는 변수의 선언할 때가 아닌 할당에 의해 타입이 결정된다. 그리고 값 재할당에 의해 변수의 타입은 언제든지 동적으로 변할 수 있다.&lt;/p&gt;
&lt;p&gt;그래서 말장난 같이 들릴 수도 있지만, 변수는 타입을 갖지 않는다. 값이 타입을 갖는 것이다.
이러한 특징은 자바스크립트가 유연하다고 느끼게 해주는 것 같기도 하지만 여러 단점도 역시 같이 존재하는 것 같다.
&lt;br/&gt;
프로그램이 복잡해질 수록 계속해서 변화하는 변수 값을 정확히 추적하기 어려울 수 있다는 점, 그래서 변수의 값을 확인하기 전까지는 타입을 확신할 수 없다는 불안감. 이러한 이유 때문에 타입 확인을 위한 코드를 작성해야 할 때도 있는데 이는 번거롭기도 하고 코드의 양도 증가시킨다.
&lt;br/&gt;
또 자바스크립트는 우리의 의도와 상관 없이 타입이 자동으로 변환될 때가 있다.
아래 코드에 예를 들어보겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;10&quot;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// string&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;분명히 a에는 문자열 10을 할당했다. typeof 연산자로 a의 타입을 확인해 보아도 string 타입인 것을 확인할 수 있다. &lt;br/&gt;
하지만 string타입인 변수 &lt;code class=&quot;language-text&quot;&gt;a&lt;/code&gt;를 number타입인 5로 나누자 기가막히게도 2라는 값이 출력된다.&lt;/p&gt;
&lt;p&gt;이처럼 자바스크립트는 유연성은 높지만 우리가 예상했던 것과는 다른 결과를 만나게 될 수도 있다.
&lt;code class=&quot;language-text&quot;&gt;타입스크립트&lt;/code&gt;를 사용하면 자바스크립트의 신뢰성이 떨어지는 부분을 상당 부분 해결할 수 있는 것 같다.&lt;br/&gt; 갑자기 타입스크립트를 광고하는 것이 좀 웃기긴 하지만 여하튼 그렇다.&lt;/p&gt;
&lt;p&gt;물론 모든 사람이 타입스크립트를 좋아하는 것은 아닌 것 같지만, 지금까지 나의 타입스크립트 사용 경험은 꽤나 만족스럽다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[자바스크립트 변수(variable)]]></title><description><![CDATA[모던 자바스크립트 Deep Dive…]]></description><link>https://jungwone.github.iovariable</link><guid isPermaLink="false">https://jungwone.github.iovariable</guid><pubDate>Thu, 29 Jul 2021 15:32:00 GMT</pubDate><content:encoded>&lt;p&gt;모던 자바스크립트 Deep Dive 라는 책을 샀다. 출판사는 &apos;위키북스&apos;다.
당분간 이 책으로 공부하면서 블로그에 정리할 예정이다.&lt;/p&gt;
&lt;h2&gt;변수란?&lt;/h2&gt;
&lt;p&gt;하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름. 즉 값의 위치를 가리키는 상징적인 이름이다.&lt;/p&gt;
&lt;p&gt;변수는 프로그래밍 언어의 컴파일러 또는 인터프리터에 의해 값이 저장된 메모리 공간의 주소로 치환되어 실행된다. 그 덕분에 개발자가 직접 메모리 주소를 통해 값을 저장하고 참조할 필요가
없고 안전하게 값에 접근이 가능하다. (자바스크립트는 &lt;code class=&quot;language-text&quot;&gt;인터프리터&lt;/code&gt; 언어이다)&lt;/p&gt;
&lt;h2&gt;할당과 참조&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;할당: 변수에 값을 저장(대입, 저장)&lt;/li&gt;
&lt;li&gt;참조: 변수에 저장된 값을 읽어들임.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;식별자&lt;/h2&gt;
&lt;p&gt;변수를 식별자라고도 하는데, 이는 어떤 값을 구별해서 식별할 수 있는 고유한 이름을 말한다.
식별자는 값이 아니라 메모리 주소를 기억하고 있다.&lt;/p&gt;
&lt;p&gt;예를 들어, result라는 변수에 30이라는 값을 대입했다고 가정해보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// result의 메모리 주소 : 0x0669F913&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;result&lt;/code&gt;는 30이라는 값이 저장된 &lt;strong&gt;메모리의 주소&lt;/strong&gt;를 기억하고 있고, &lt;strong&gt;메모리 주소&lt;/strong&gt;를 통해 저장된 값에 접근이 가능하다.&lt;/p&gt;
&lt;h2&gt;변수 선언과 undefined&lt;/h2&gt;
&lt;p&gt;자바스크립트에서는 &lt;code class=&quot;language-text&quot;&gt;var score;&lt;/code&gt; 이렇게만 작성해도 score라는 변수에 undefined라는 값이 암묵적으로 할당되어 초기화된다. 자바스크립트의 독특한 특징이라고 한다.&lt;/p&gt;
&lt;p&gt;참고로 &lt;code class=&quot;language-text&quot;&gt;undefined&lt;/code&gt;는 자바스크립트의 primitive type중의 하나이다.&lt;br/&gt;&lt;/p&gt;
&lt;h4&gt;Primitive Type&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;number&lt;/li&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;li&gt;boolean&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;undefined&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;li&gt;Symbol(ES6)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;변수 선언의 실행 시점과 변수 호이스팅&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;score&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// undefined&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; score &lt;span class=&quot;token comment&quot;&gt;// let, const의 경우가 아닌 var의 경우에만 해당한다.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 코드는 동작을 하지 않아야 할 것 같지만, 참조 에러가 나지 않고 undefined가 출력된다.
변수 선언이 소스코드가 한 줄씩 순차적으로 실행되는 &lt;code class=&quot;language-text&quot;&gt;런타임(runtime)&lt;/code&gt;이 아니라 그 이전 단계에서 먼저 실행되기 때문이다.&lt;/p&gt;
&lt;p&gt;즉, 자바스크립트 엔진은 변수 선언이 소스코드의 아래에 있더라도 다른 코드보다 먼저 실행한다.
이처럼 변수 선언문이 코드의 위쪽으로 끌어 올려진 것처럼 동작하는 특징을 변수 호이스팅(variable hoisting)이라고 한다.&lt;/p&gt;
&lt;h2&gt;값의 할당&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; score &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;자바스크립트에서 변수 선언은 &lt;strong&gt;런타임 이전&lt;/strong&gt;에 실행되지만, 값의 할당은 소스코드가 순차적으로 실행되는 시점인 &lt;strong&gt;런타임&lt;/strong&gt;에 실행된다.
&lt;strong&gt;따라서 score에 값 80을 할당하는 시점에는 이미 변수 선언이 완료된 상태이며, undefined로 초기화되어 있다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;위에 말했듯이 자바스크립트에서 변수 선언은 런타임 이전 단계에서 실행되고, 값의 할당은 런타임에 실행되기 때문이다.&lt;/p&gt;
&lt;p&gt;또 하나 재미있는 사실은 만약의 우리가 변수 &lt;code class=&quot;language-text&quot;&gt;score&lt;/code&gt;의 값을 90으로 바꾼다고 했을 때, 80을 저장했던 메모리 공간에 90을 저장하는 것이 아니라 80이 존재하는 메모리 공간은 그대로 둔 채, 새로운 메모리 공간을 확보하고 그 공간에 숫자 90을 저장한다는 것이다.&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;텍스트로만 적으니까 뭔가 내가 적으면서도 좀 답답한 느낌이 있다. 맥북으로 간단하게라도 그림을 그릴 수 있는 것이 있는지 찾아보고 다음 포스팅부터 사용해보자.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[결국 개발 블로그를 만들었다 (feat. GatsbyJS)]]></title><description><![CDATA[고민의 과정 개발 블로그를 시작해야지 하면서 이제야 제대로 된 출발을 하게 됐다.
처음에는 다른 것에 신경쓰지 않고 글만 쓰고 싶어서 Hugo에 올라와 있는 템플릿 중 그나마 마음에 드는 것을 이용해서 블로그를 만들었다. 테마가 10…]]></description><link>https://jungwone.github.iofeat-gatsbyjs</link><guid isPermaLink="false">https://jungwone.github.iofeat-gatsbyjs</guid><pubDate>Mon, 05 Jul 2021 14:34:00 GMT</pubDate><content:encoded>&lt;h2&gt;고민의 과정&lt;/h2&gt;
&lt;p&gt;개발 블로그를 시작해야지 하면서 이제야 제대로 된 출발을 하게 됐다.&lt;br/&gt;
처음에는 다른 것에 신경쓰지 않고 글만 쓰고 싶어서 Hugo에 올라와 있는 템플릿 중 그나마 마음에 드는 것을 이용해서 블로그를 만들었다.&lt;/p&gt;
&lt;p&gt;테마가 100% 마음에 들지 않다 보니, 계속해서 다른 테마를 기웃거리면서 시간을 보냈다.&lt;br/&gt;
물론 커스텀을 시도해 보았으나, 뭔가 조금씩 계속 아쉬웠다.&lt;/p&gt;
&lt;p&gt;그래서 플랫폼을 이용하는 것도 생각을 했고, 정말 많이 고민을 했던 플랫폼은 &lt;code class=&quot;language-text&quot;&gt;Velog&lt;/code&gt;였다.&lt;br/&gt;
둘러보니 글도 정말 편하게 쓸 수 있었고 velog 유저들끼리의 커뮤니케이션도 활발해 보였다.&lt;br/&gt;
하지만 내 성격상 개발 블로그에 있어서 만큼은 직접 만들지 않는다면 분명히 계속 아쉬움을 계속 느낄 것이 너무나도 명확했다.&lt;/p&gt;
&lt;p&gt;결국 이렇게 마음을 쏟지 못하고 애매한 상태로 블로그를 운영하느니, 내 입맛에 맞는 블로그를 스스로 만들어보자! 라는 결단과 함꼐 작업에 착수하게 된다.&lt;/p&gt;
&lt;h2&gt;그래서 Gatsby를 선택한 이유는?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;이름이 상당히 마음에 들었다. 그냥 개인적인 취향이다.&lt;/li&gt;
&lt;li&gt;Docs가 깔끔하고 이해하기 쉬웠다.&lt;/li&gt;
&lt;li&gt;내가 주로 사용하는 React를 이용해서 개발할 수 있었다.&lt;/li&gt;
&lt;li&gt;Gatsby는 GraphQL을 사용하는데, 작년 12월에 토이 플젝에서 사용했던 GraphQL의 향수가 나를 휘감았다.&lt;/li&gt;
&lt;li&gt;내가 원하는 기능과 관련된 플러그인들이 있었다. (RSS, 사이트맵 등)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;RSS, 사이트맵은 내가 매번 수동적으로 생성해야 하는 것은 너무나도 귀찮은 작업인데, 우리의 아름다운 &lt;code class=&quot;language-text&quot;&gt;Gatsby&lt;/code&gt;는 이 모든 것을 해결할 수 있는 플러그인을 제공해준다!!&lt;/p&gt;
&lt;h2&gt;완성 후기&lt;/h2&gt;
&lt;p&gt;아직 100% 완성은 아니다. about 페이지도 비어있는 상태라서 채워 넣어야 한다.&lt;br/&gt;
중간에 막히는 부분이나 에러가 발생할 때 &apos;내가 왜 직접 만들었을까.. 그냥 velog 이용할걸&apos; 하는 생각이 꽤 많이 들었는데, 어쩔 수 없었다. 칼을 뽑았으면 무라도 베어야지. 중간에 만들다가 마는 것은 굉장히 찝찝한 일이다.&lt;/p&gt;
&lt;p&gt;여하튼 내가 원하는 기능들만 깔끔하게 넣어서 만들었다. 간단한 페이징과 태그들을 모아주는 페이지.
확실히 애정이 듬뿍 담기게 되고 내거라는 느낌이 강하게 드는 것이 아주 만족스럽다.&lt;/p&gt;
&lt;p&gt;평일에는 퇴근하고 저녁먹고 운동하고 와서 자기 전에 조금씩 작업을 했고, 주말에 좀 몰아쳐서 작업을 했다.&lt;br/&gt;
앞으로는 내가 공부한 것들과(TIL 느낌의?) 개발과 관련된 것들 중, 내가 기록으로 남기고 싶은 것들로 나의 블로그를 채워갈 예정이다.&lt;/p&gt;</content:encoded></item></channel></rss>